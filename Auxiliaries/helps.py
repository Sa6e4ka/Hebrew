from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton, WebAppInfo, Message, CallbackQuery
from aiogram.filters.callback_data import CallbackData
import functools
from Loggs import logger


'''
–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –æ—à–∏–±–æ–∫
'''
def error_handler(func):
    @functools.wraps(func)
    async def wrapper(*args, **kwargs):
        message_or_call = next((arg for arg in args if isinstance(arg, (Message, CallbackQuery))), None)
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            username = (message_or_call.from_user.username 
                        if message_or_call and isinstance(message_or_call, (Message, CallbackQuery)) 
                        else 'Unknown user')
            logger.debug(f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ "{func.__name__}": {e}')
            
            if message_or_call:
                error_message = "–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üò®\n\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏ –æ–± —ç—Ç–æ–º @Megagigapoopfart"
                if isinstance(message_or_call, Message):
                    await message_or_call.answer(error_message, reply_markup=button(["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]))
                elif isinstance(message_or_call, CallbackQuery):
                    await message_or_call.message.edit_text(error_message, reply_markup=button(["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]))
    return wrapper


'''
–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
'''
StartKB = InlineKeyboardBuilder()
buttons_list = ["–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –≤ —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä—å", "–£—á–∏—Ç—å —Å–≤–æ–∏ —Å–ª–æ–≤–∞", "–£—á–∏—Ç—å –ø–æ —Ç–µ–º–∞–º", "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ –ø–æ —Ç–µ–º–∞–º", "–†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è –∏–≥—Ä–∞"]

for i in buttons_list:
    StartKB.button(text=i, callback_data=i)
StartKB.adjust(1, 2, 1, 1,)


'''
–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω—è–∏ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
'''
def button(text : list):
    KB = InlineKeyboardBuilder()
    for i in text:
        KB.button(text=i, callback_data=i)
    KB.adjust(1,)
    return KB.as_markup()


'''
–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç–µ–º–∞–º–∏
'''
def themes_button(text : list):
    KB = InlineKeyboardBuilder()
    for i in text:
        KB.button(text=i, callback_data=f"theme_{i}")
    KB.adjust(1,)
    return KB.as_markup


'''
–ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ pealim.com
'''
pealimKB = InlineKeyboardBuilder()
pealimKB.button(
    text="–ü–µ—Ä–µ–π—Ç–∏", web_app=WebAppInfo(url="https://www.pealim.com/ru/search/")
)
pealimKB.adjust(1,)


'''
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–≤—Å–µ –Ω–∏–∂–µ)
–Ø –ø—Ä–æ—Å—Ç–æ —Ö–∑ –∫–∞–∫ —ç—Ç–∞ —Ö—É–π–Ω—è —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏–ø–∞—Å—Ç–∞
'''
class Pagination(CallbackData, prefix="pag"):
    action: str  # –î–µ–π—Å—Ç–≤–∏–µ
    page: int  # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã

class Pagination2(CallbackData, prefix="page"):
    action: str  # –î–µ–π—Å—Ç–≤–∏–µ
    page: int  # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã

async def paginator(themes : list, page: int = 0, ):
    builder = InlineKeyboardBuilder() 

    start_offset = page * 3  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    limit = 3  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Ç–µ–º –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    end_offset = start_offset + limit  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è

    for theme in themes[start_offset:end_offset]:  
        builder.button(text=theme ,callback_data=f"theme_{theme}")  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
    buttons_row = []  
    if page > 0:  
        buttons_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=Pagination(action="prev", page=page - 1).pack()))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    if end_offset < len(themes):  
        buttons_row.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=Pagination(action="next", page=page + 1).pack()))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–≤–ø–µ—Ä–µ–¥"
    
    builder.row(*buttons_row)  
    builder.adjust(1,)
    return builder.as_markup()  



async def paginator_for_themed_learn(themes : list, page: int = 0):
    builder = InlineKeyboardBuilder() 

    start_offset = page * 3  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    limit = 3  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Ç–µ–º –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    end_offset = start_offset + limit  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è

    for theme in themes[start_offset:end_offset]:  
        builder.button(text=theme ,callback_data=f"learn_themed_{theme}")  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
    buttons_row = []  
    if page > 0:  
        buttons_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=Pagination2(action="prev", page=page - 1).pack()))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    if end_offset < len(themes):  
        buttons_row.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=Pagination2(action="next", page=page + 1).pack()))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–≤–ø–µ—Ä–µ–¥"
    
    builder.row(*buttons_row)  
    builder.adjust(1,)
    return builder.as_markup()  


