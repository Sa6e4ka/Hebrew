'''
–†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è —Å–ª–æ–≤–∞–º –∏–∑ –ª–∏—á–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
'''

from asyncio import sleep

from aiogram import F, Router
from aiogram.filters import Command, StateFilter, or_f
from aiogram.fsm.context import FSMContext
from aiogram.types import  Message, CallbackQuery

from sqlalchemy.ext.asyncio import AsyncSession
from Database import orm_get_rand_personal_word

from Auxiliaries import button, error_handler, Learn


# Learn Router
learn_router = Router()


'''
–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è —Å–ª–æ–≤–∞–º –∏–∑ –ª–∏—á–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç 2 —Å—Ü–µ–Ω–∞—Ä–∏—è:
    –í–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã
    –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
'''
async def process_learn(state: FSMContext, session: AsyncSession, chat_id: int, message_or_call):
    try:
        word = await orm_get_rand_personal_word(session=session, chat_id=chat_id)
        await state.set_state(Learn.Translate)
        intro_message = (
            '–°–µ–π—á–∞—Å —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è —Å–ª–æ–≤–æ –Ω–∞ –ò–≤—Ä–∏—Ç–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ä–∞–Ω–µ–µ –∑–∞–ø–∏—Å—ã–≤–∞–ª(–∞) –≤ —Å–≤–æ–π –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å, '
            '–∏ —Ç—ã –¥–æ–ª–∂–µ–Ω(–Ω–∞) –±—É–¥–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ <b>–Ω–∞ –†—É—Å—Å–∫–æ–º</b>.\n\n'
            '–ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –≤–µ—Ä–Ω—ã–π, —Ç–æ —Ç–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ.\n\n'
            '<b>–°–ª–æ–≤–∞ –∏–∑ —Ç–≤–æ–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è –±—É–¥—É—Ç –≤—ã–±–∏—Ä–∞—Ç—å—Å—è –¥–æ —Ç–µ—Ö –ø–æ—Ä –ø–æ–∫–∞ —Ç—ã –Ω–µ –Ω–∞–∂–º–µ—à—å –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–µ –≤–≤–µ–¥–µ—à—å –∫–æ–º–∞–Ω–¥—É /stop</b>'
        )
        
        if isinstance(message_or_call, Message):
            await message_or_call.answer(intro_message)
            await sleep(5)

            await message_or_call.answer(
            text=f"–°–ª–æ–≤–æ:<b>\n\n{word[0]}</b>\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥:",
            reply_markup=button(text=['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–∫"])
        )
            await state.update_data(translation=word[1], transcription=word[2], word=word[0])
            return
        
        await message_or_call.message.edit_text(intro_message)
        await sleep(5)
        await message_or_call.message.edit_text(
            text=f"–°–ª–æ–≤–æ:<b>\n\n{word[0]}</b>\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥:",
            reply_markup=button(text=['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–∫"])
        )
        await state.update_data(translation=word[1], transcription=word[2], word=word[0])
    except AttributeError:
        error_messaage = "–ö–∞–∂–µ—Ç—Å—è, –≤ —Ç–≤–æ–µ–º —Å–ª–æ–≤–∞—Ä–µ –Ω–µ—Ç —Å–ª–æ–≤ ü§∑‚Äç‚ôÇÔ∏è"
        if isinstance(message_or_call, Message):
            await message_or_call.answer(error_messaage, reply_markup=button(["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –≤ —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä—å"]))
            return
        await message_or_call.message.edit_text(error_messaage, reply_markup=button(text=['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –≤ —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä—å"]))


'''
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è
'''
@learn_router.callback_query(or_f(F.data == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–∫"))
@error_handler
async def stop_lesson(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text(text="–£—Ä–æ–∫ –æ–∫–æ–Ω—á–µ–Ω!\n\n–ù–∞–¥–µ—é—Å—å —Ç—ã –Ω–µ —Å—Ç–∞–Ω–µ—à—å —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ —Å–¥–∞–≤–∞—Ç—å—Å—è üòà", reply_markup=button(["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]))


'''
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è
'''
@learn_router.callback_query(or_f(F.data == '–£—á–∏—Ç—å —Å–ª–æ–≤–∞', F.data == "–£—á–∏—Ç—å —Å–≤–æ–∏ —Å–ª–æ–≤–∞"))
@error_handler
async def learn_byb(call: CallbackQuery, state: FSMContext, session : AsyncSession):
    await process_learn(state, session, call.message.chat.id, call)


'''
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è
'''
@learn_router.message(StateFilter(None), Command('learnwords'))
@error_handler
async def learn(message: Message, session: AsyncSession, state: FSMContext):
    await process_learn(state, session, message.chat.id, message)


'''
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–µ—Ä–µ–≤–æ–¥–∞:
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –∏ –¥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
'''
@learn_router.message(StateFilter(Learn.Translate), F.text)
@error_handler
async def check(message: Message, state: FSMContext, session: AsyncSession):
     
    state_data = await state.get_data()
    if message.text.lower() == state_data["translation"]:
        await message.answer("<b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b> ü•≥\n\n–õ–æ–≤–∏ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ üëá")
        
        await sleep(1)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ –ª–∏—á–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        word = await orm_get_rand_personal_word(session=session, chat_id=message.chat.id)
        await message.answer(text=f"–°–ª–æ–≤–æ:<b>\n\n{word[0]}</b>\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥:", reply_markup=button(text=['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–∫"]))
        await state.update_data(translation = word[1], transcription = word[2], word = word[0])
        return
    
    await message.answer('<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b> üò®\n\n–ü–æ–ø—Ä–æ–±—É–π-–∫–∞ –µ—â–µ —Ä–∞–∑!', reply_markup=button(['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–∫"]))


'''
–û–±—Ä–∞–±–æ—Ç—á–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Å–ª–æ–≤–∞
'''
@learn_router.callback_query(F.data == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
@error_handler
async def skip(call : CallbackQuery, state: FSMContext, session: AsyncSession):
    await call.answer()
    sd = await state.get_data()
    await call.message.edit_text(
        text=f"–°–ª–æ–≤–æ - {sd['word']} - [{sd['transcription']}]\n\n–ü–µ—Ä–µ–≤–æ–¥ - <b>{sd['translation']}</b>"
    )
    await sleep(3)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ –ª–∏—á–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    word = await orm_get_rand_personal_word(session=session, chat_id=call.message.chat.id)
    await call.message.edit_text(text=f"–°–ª–æ–≤–æ:<b>\n\n{word[0]}</b>\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥:", reply_markup=button(text=['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']))
    
    await state.update_data(translation = word[1], transcription = word[2], word = word[0])
