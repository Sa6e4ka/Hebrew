'''
–û–±—É—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞–º –∏–∑ –æ–±—â–µ–≥–æ–ª —Å–ª–æ–≤–∞—Ä—è
'''
from asyncio import sleep

from aiogram import F, Router
from aiogram.filters import Command, StateFilter, or_f
from aiogram.fsm.context import FSMContext
from aiogram.types import  Message, CallbackQuery

from sqlalchemy.ext.asyncio import AsyncSession
from Database import orm_get_theme_list, orm_get_themed_words_list, orm_get_random_themed_word

from Auxiliaries import LearnThemed, Learn1, button, paginator_for_themed_learn, Pagination2, error_handler
from Loggs import logger


# Global learn Router
global_learn_router = Router()


'''
–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–¥—ã
'''
async def process_themed_learning(message_or_call, session: AsyncSession):
    themes = await orm_get_theme_list(session=session)
    if len(themes) == 0:
        text = "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –Ω–∏ –æ–¥–Ω–æ–π —Ç–µ–º—ã –µ—â–µ –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å ü§î"
        reply_markup = button(["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É"]) if isinstance(message_or_call, CallbackQuery) else button(["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        
        if isinstance(message_or_call, Message):
            await message_or_call.answer(text=text, reply_markup=reply_markup)
            return
        await message_or_call.message.edit_text(text=text, reply_markup=reply_markup)
        return
    
    KB = await paginator_for_themed_learn(page=0, themes=themes)
    text = "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å —É—á–∏—Ç—å —Å–ª–æ–≤–∞"
    
    if isinstance(message_or_call, Message):
        await message_or_call.answer(text=text, reply_markup=KB)
        return
    await message_or_call.message.edit_text(text=text, reply_markup=KB)


'''
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –ø–æ –∫–æ—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
—Å–æ–±–∏—Ä–∞–µ—Ç—Å—è —É—á–∏—Ç—å —Å–ª–æ–≤–∞ –∏–∑ –æ–±—â–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è
'''
@global_learn_router.callback_query(F.data == "–£—á–∏—Ç—å –ø–æ —Ç–µ–º–∞–º")
@error_handler
async def learn_themed_on_button(call: CallbackQuery, session: AsyncSession):
    await process_themed_learning(call, session)


'''
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å —Ç–æ–π –∂–µ —Ü–µ–ª—å—é (3 —á–∞—Å–∞ –Ω–æ—á–∏ —è –∑–∞–µ–±–∞–ª—Å—è —ç—Ç–∏ –∫–æ–º–º–µ–Ω—Ç—ã –ø–∏—Å–∞—Ç—å)
'''
@global_learn_router.message(Command("learnthemed"), StateFilter(None))
@error_handler
async def chosen_choice(message : Message, session: AsyncSession):
    await process_themed_learning(message, session)


'''
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –≤—ã–±–æ—Ä–µ —Ç–µ–º—ã
'''
@global_learn_router.callback_query(Pagination2.filter())
@error_handler
async def pagination_handler(call: CallbackQuery, callback_data: Pagination2, session: AsyncSession):
    page = callback_data.page  # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback data
    # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–µ–º
    themes = await orm_get_theme_list(session=session)  

    await call.message.edit_reply_markup(reply_markup=await paginator_for_themed_learn(page=page, themes=themes))  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–æ–∫ "–≤–ø–µ—Ä–µ–¥" –∏–ª–∏ "–Ω–∞–∑–∞–¥"


'''
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–º–æ–π - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:
    –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞ –ø–æ —Ç–µ–º–µ —Å–ø–∏—Å–∫–æ–º
    —É—á–∏—Ç—å —Å–ª–æ–≤–∞ –ø–æ —Ç–µ–º–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º
'''
@global_learn_router.callback_query(F.data.startswith("learn_themed_"))
@error_handler
async def lear_themed(call: CallbackQuery, state: FSMContext):
    await state.set_state(LearnThemed.first)
    await state.update_data(theme = call.data.split("learn_themed_")[-1])

    await call.answer()

    markup = button(["–£—á–∏—Ç—å –≤—ã–±–æ—Ä–∫–æ–π", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫"])
    await call.message.edit_text(
        text="–¢—ã –º–æ–∂–µ—à—å —É—á–∏—Ç—å —Å–ª–æ–≤–∞ —Å–ª—É—á–∞–π–Ω–æ–π –≤—ã–±–æ—Ä–∫–æ–π –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ö —Å–ø–∏—Å–æ–∫ - –≤—ã–±–∏—Ä–∞–π", 
        reply_markup=markup
    )
 

'''
–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –ø–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–π —Ç–µ–º–µ (–≤ –±—É–¥—É—â–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã —Å–ø–∏—Å–∫–∞)
'''
@global_learn_router.callback_query(or_f(F.data == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫"))
@error_handler
async def get_themed_words_list_on_button(call : CallbackQuery, state: FSMContext, session: AsyncSession):
    await call.answer()
    theme = await state.get_data()
    
    # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
    word_list = await orm_get_themed_words_list(session=session, theme=theme)
    
    string = ""
    for i, k in word_list[0].items():
        string += f"<b>{i} : {k}</b>\n\n"
    if len(string) > 0:
        await call.message.edit_text(f"{string}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ: <b>{word_list[1]}</b>", reply_markup=button(["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]))
    else:
        await call.message.edit_text("–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ —Å–ª–æ–≤ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ üò≠", reply_markup=button(["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞"]))


'''
–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –≤—ã–±–æ—Ä–∫–æ - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
'''
@global_learn_router.callback_query(F.data == '–£—á–∏—Ç—å –≤—ã–±–æ—Ä–∫–æ–π')
async def learn_byb(call: CallbackQuery, state: FSMContext, session : AsyncSession):
    try:
        theme = await state.get_data()
        # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ –æ–±—â–µ–π —Ç–∞–±–ª–∏—Ü—ã
        word = await orm_get_random_themed_word(session=session, data=theme)

        await state.set_state(Learn1.Translate)
        await call.message.edit_text('–°–µ–π—á–∞—Å —Ç–µ–±–µ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–ª–æ–≤–∞ –Ω–∞ –ò–≤—Ä–∏—Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Ä–∞–Ω–µ–µ –∑–∞–ø–∏—Å—ã–≤–∞–Ω—ã –≤ –æ–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å, –∏ —Ç—ã –¥–æ–ª–∂–µ–Ω(–Ω–∞) –±—É–¥–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å –∏—Ö –ø–µ—Ä–µ–≤–æ–¥<b>–Ω–∞ –†—É—Å—Å–∫–æ–º</b>.\n\n–ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –≤–µ—Ä–Ω—ã–π, —Ç–æ —Ç–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ.\n\n<b>–°–ª–æ–≤–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –±—É–¥—É—Ç –≤—ã–±–∏—Ä–∞—Ç—å—Å—è –¥–æ —Ç–µ—Ö –ø–æ—Ä –ø–æ–∫–∞ —Ç—ã –Ω–µ –≤–≤–µ–¥–µ—à—å –∫–æ–º–∞–Ω–¥—É:\n\n/stop</b>')
        await sleep(5)

        await call.message.answer(text=f"–°–ª–æ–≤–æ:<b>\n\n{word[0]}</b>\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥:", reply_markup=button(text=['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–∫"]))
        await state.update_data(translation = word[1], transcription = word[2], word = word[0])
    except AttributeError as e:
        await call.message.edit_text("–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ –≤ —Å–ª–æ–≤–∞—Ä–µ –µ—â–µ –Ω–µ—Ç —Å–ª–æ–≤ –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ ü§∑‚Äç‚ôÇÔ∏è\n\n–ï—Å–ª–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç —Ç–∞–∫–∞—è –∂–µ –æ—à–∏–±–∫–∞, —Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏ @Megagigapoopfart", reply_markup=button(["–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]))
        logger.debug(f'{e}')
        await state.clear()


'''
–í—Ç—Ä–æ–π —à–∞–≥ –≤ –æ—Ç–≥–∞–¥—ã–≤–∞–Ω–∏–∏ —Å–ª–æ–≤ - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
'''
@global_learn_router.message(StateFilter(Learn1.Translate), F.text)
@error_handler
async def check(message: Message, state: FSMContext, session: AsyncSession):
      
    state_data = await state.get_data()
    if message.text.lower() == state_data["translation"]:
        await message.answer("<b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b> ü•≥\n\n–õ–æ–≤–∏ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ üëá")
        
        await sleep(1)

        # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –æ–±—â–µ–π —Ç–∞–±–ª–∏—Ü–µ
        word = await orm_get_random_themed_word(session=session, data=state_data)
        await message.answer(text=f"–°–ª–æ–≤–æ:<b>\n\n{word[0]}</b>\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥:", reply_markup=button(text=['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–∫"]))
        await state.update_data(translation = word[1], transcription = word[2], word = word[0])
        return
    
    await message.answer('<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b> üò®\n\n–ü–æ–ø—Ä–æ–±—É–π-–∫–∞ –µ—â–µ —Ä–∞–∑!', reply_markup=button(['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–æ–≤–æ']))
    

'''
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Å–ª–æ–≤–∞
'''
@global_learn_router.callback_query(F.data == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–æ–≤–æ')
@error_handler
async def skip(call : CallbackQuery, state: FSMContext, session: AsyncSession):
    await call.answer()

    sd = await state.get_data()
    await call.message.edit_text(
        text=f"–°–ª–æ–≤–æ - {sd['word']} - [{sd['transcription']}]\n\n–ü–µ—Ä–µ–≤–æ–¥ - <b>{sd['translation']}</b>"
    )
    await sleep(3)

    # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –æ–±—â–µ–π —Ç–∞–±–ª–∏—Ü–µ
    word = await orm_get_random_themed_word(session=session, data=sd)
    await call.message.edit_text(text=f"–°–ª–æ–≤–æ:<b>\n\n{word[0]}</b>\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥:", reply_markup=button(text=['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']))
    
    await state.update_data(translation = word[1], transcription = word[2], word = word[0])
