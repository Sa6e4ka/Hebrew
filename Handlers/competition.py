'''
–†–µ–∂–∏–º —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π
'''
from asyncio import sleep

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from aiogram.types import  Message, CallbackQuery

from sqlalchemy.ext.asyncio import AsyncSession
from Database import orm_get_rand_global_word, orm_update_points, orm_get_top_users, orm_count_all_words

from Auxiliaries import Competition, button, error_handler, intro
from Loggs import logger


# Compete router
compete_router = Router()


'''
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –≤ –æ–±—â–µ–º —Å–ª–æ–≤–∞—Ä–µ
–ê —Ç–∞–∫ –∂–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Å–æ–±–∞ –≤—ã–∑–æ–≤–∞ - –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π
'''
async def check_compete_availability(session: AsyncSession, message_or_call, is_callback=False):
    count = await orm_count_all_words(session=session)
    # –ï—Å–ª–∏ —Å–ª–æ–≤ –≤ –æ–±—â–µ–º —Å–ª–æ–≤–∞—Ä–µ –º–µ–Ω—å—à–µ 50, —Ç–æ —Ä–µ–∂–∏–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    if count < 50:
        response_text = "–†–µ–π—Ç–∏–Ω–≥–æ–≤—ã–π —Ä–µ–∂–∏–º —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º, –∫–æ–≥–¥–∞ —Ä–∞–∑–º–µ—Ä –æ–±—â–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è –ø—Ä–µ–≤—ã—Å–∏—Ç 50 —Å–ª–æ–≤"
        reply_markup = button(
            [
                "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö",
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            ]
        )
        if is_callback:
            await message_or_call.message.edit_text(
                response_text,
                reply_markup=reply_markup
            )
        else:
            await message_or_call.answer(
                response_text,
                reply_markup=reply_markup
            )
        return False
    
    reply_markup = button(
        [
            "–ù–∞—á–∞—Ç—å", 
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        ]
    )
    if is_callback:
        await message_or_call.answer()
        await message_or_call.message.edit_text(
            intro,
            reply_markup=reply_markup
        )
    else:
        await message_or_call.answer(
            intro,
            reply_markup=reply_markup
        )
    return True


'''
–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
'''
async def send_top_users(session: AsyncSession, message_or_call, is_callback=False):
    top = await orm_get_top_users(session=session)
    
    string = "–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:\n\n"
    for i, z in zip(top.items(), range(1, len(top) + 1)):
        string += f"<b>{z} –º–µ—Å—Ç–æ</b>\n{i[0]} - {i[1][0]} –±–∞–ª–ª–æ–≤.\n–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è - {i[1][1] * 100}%\n\n"
    
    reply_markup = button(
        [
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        ]
    )
    
    if is_callback:
        await message_or_call.message.edit_text(
            text=string,
            reply_markup=reply_markup
        )
        return
    
    await message_or_call.answer(
        text=string,
        reply_markup=reply_markup
    )


'''
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤
'''
@compete_router.message(Command("top"))
@error_handler
async def get_users_top(message: Message, session: AsyncSession):
    await send_top_users(session, message)


'''
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤
'''
@compete_router.callback_query(F.data == "–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤")
@error_handler
async def top_on_button(call: CallbackQuery, session: AsyncSession):
    await send_top_users(session, call, is_callback=True)


'''
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /compete - —Ä–µ–∂–∏–º —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
'''
@compete_router.message(Command("compete"))
@error_handler
async def compete1(message: Message, session: AsyncSession):
    await check_compete_availability(session, message)


'''
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—Ö–æ–∂–¥–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
'''
@compete_router.callback_query(F.data == "–†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è –∏–≥—Ä–∞")
@error_handler
async def compete2(call: CallbackQuery, session: AsyncSession):
    await check_compete_availability(session, call, is_callback=True)


'''
–î–æ —Ç–µ—Ö –ø–æ—Ä –ø–æ–∫–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤—ã–¥–∞–µ—Ç—Å—è –º–∞–Ω—É–∞–ª
'''
@compete_router.callback_query(F.data == "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö")
@error_handler
async def compete_info(call: CallbackQuery):
    await call.answer()
    await call.message.edit_text(
        text= intro,
        reply_markup=button(["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    )


'''
–ù–∞—á–∞–ª–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∏ –∑–∞–ø–∏—Å—å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏.
'''
@compete_router.callback_query(F.data == "–ù–∞—á–∞—Ç—å")
async def compete_first(call : CallbackQuery, session: AsyncSession, state: FSMContext):
    try:
        # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ –æ–±—â–µ–π —Ç–∞–±–ª–∏—Ü—ã
        word = await orm_get_rand_global_word(session=session)
        await state.set_state(Competition.Translate)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(
            word = word[0],
            translation = word[1], 
            transcription = word[2], 
            chat_id = call.message.chat.id,
            points = 0,
            attempts = 1
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–æ–≤–∞
        await call.message.edit_text(text=f"–°–ª–æ–≤–æ:<b>\n\n{word[0]}</b>\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥:", reply_markup=button(text=['–ù–µ –∑–Ω–∞—é', "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É"]))
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ
    except AttributeError as e:
        await call.message.edit_text("–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ –≤ —Å–ª–æ–≤–∞—Ä–µ –µ—â–µ –Ω–µ—Ç —Å–ª–æ–≤ –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ ü§∑‚Äç‚ôÇÔ∏è\n\n–ï—Å–ª–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç —Ç–∞–∫–∞—è –∂–µ –æ—à–∏–±–∫–∞, —Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏ @@Megagigapoopfart", reply_markup=button(["–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –≤ —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä—å"]))
        await state.clear()
        logger.debug(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–æ–º–∞–Ω–¥–æ–π /learnwords –Ω–µ –∑–∞–≥—Ä—É–∑–∏–≤ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å, —á–µ–º –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É –≤ —Ñ—É–Ω–∫—Ü–∏–∏ learn: {e}')


'''
–í–æ—Ç—Ä–æ–π —à–∞–≥ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–∏—è —Å–ª–æ–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ.
–ü—Ä–∏–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞ (–∏–ª–∏ –µ–≥–æ –Ω–µ –ø—Ä–∏–±–∞–≤–ª–µ–Ω–∏–µ) –∏ –ø–æ–ø—ã—Ç–∫–∏ –∫ —Å—á–µ—Ç—á–∏–∫—É
'''
@compete_router.message(StateFilter(Competition.Translate), F.text)
@error_handler
async def compete_second(message: Message, state: FSMContext, session: AsyncSession):
     
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –±–∞–ª–ª–æ–≤
    state_data = await state.get_data()
    word = await orm_get_rand_global_word(session=session)

    await state.update_data(translation = word[1], transcription = word[2], word = word[0]) 
    
    if message.text.lower() == state_data["translation"]:
        await message.answer("<b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b> ü•≥\n\n–õ–æ–≤–∏ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ üëá")
        await state.update_data(points = state_data["points"] + 1, attempts = state_data["attempts"] + 1)  
    else:
        await message.answer(f'<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b> üò®\n\n{state_data["translation"]} - [{state_data["transcription"]}]')
        await state.update_data(attempts = state_data["attempts"] + 1)  
    
    await sleep(1)
    await message.answer(text=f"–°–ª–æ–≤–æ:<b>\n\n{word[0]}</b>\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥:", reply_markup=button(text=['–ù–µ –∑–Ω–∞—é', "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É"]))
    

'''
–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Å–ª–æ–≤–∞
'''
@compete_router.callback_query(F.data == '–ù–µ –∑–Ω–∞—é')
@error_handler
async def skip(call : CallbackQuery, state: FSMContext, session: AsyncSession):
    await call.answer()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞
    word = await orm_get_rand_global_word(session=session)
    state_data = await state.get_data()

    await state.set_state(Competition.Translate)
    # –ü—Ä–∏–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
    await state.update_data(
        word = word[0],
        translation = word[1], 
        transcription = word[2], 
        chat_id = call.message.chat.id,
        attempts = state_data["attempts"] + 1
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å–ª–æ–≤–∞
    await call.message.edit_text(text=f"{state_data['translation']} - [{state_data['transcription']}]")
    await sleep(2)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    await call.message.edit_text(text=f"–°–ª–æ–≤–æ:<b>\n\n{word[0]}</b>\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥:", reply_markup=button(text=['–ù–µ –∑–Ω–∞—é', "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É"]))


'''
–ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–≥—Ä—ã
'''
@compete_router.callback_query(F.data == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É")
@error_handler
async def stop_compete(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    await call.answer()

    state_data = await state.get_data()
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
    await orm_update_points(session=session, data=state_data)
    await state.clear()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞ –∏–≥—Ä—É –±–∞–ª–ª–æ–≤
    await call.message.answer(
        text=f"<b>–¢–≤–æ–∏ –±–∞–ª–ª—ã –∑–∞ —ç—Ç—É –ø–æ–ø—ã—Ç–∫—É</b> - {state_data['points']}\n\n<b>–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</b> - {(state_data['points'] / state_data['attempts'])*100}%.\n\n–¢–≤–æ–∏ –±–∞–ª–ª—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É. –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤",
        reply_markup=button(
            [
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                "–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤"
            ]
        )
    )


'''
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤
'''
@compete_router.message(Command("top"))
@error_handler
async def get_users_top(message: Message, session: AsyncSession):
    await send_top_users(session, message)


'''
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤
'''
@compete_router.callback_query(F.data == "–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤")
@error_handler
async def top_on_button(call: CallbackQuery, session: AsyncSession):
    await send_top_users(session, call, is_callback=True)
